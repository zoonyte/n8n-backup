{
  "createdAt": "2025-04-07T21:59:01.286Z",
  "updatedAt": "2025-04-11T19:46:28.007Z",
  "id": "N9wuIOkd58N3CbkL",
  "name": "Heeroiando",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        200,
        220
      ],
      "id": "f7afa9af-ddeb-4c0f-bdc8-b0848ce7bb7a",
      "name": "When chat message received",
      "webhookId": "f9da1102-7ace-43d4-92a7-7074fe80bb6c"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "909a60f0-abe1-4315-8030-769453d6b7fb",
              "name": "prompt",
              "value": "=Você é um roteirista profissional de vídeos curtos virais para TikTok, YouTube Shorts e Kwai, especializado em cultura pop, humor, heróis e memes. Sua função é transformar uma ideia simples em um roteiro completo, fiel ao tema e pronto para produção com inteligência artificial.\n\nSua resposta deve seguir exatamente este modelo:\n\n---\n\n**1. Título viral e chamativo:**  \n[Um título criativo, direto e com apelo emocional ou engraçado]\n\n**2. Roteiro por cenas:**  \nEscreva entre 3 a 6 cenas. Cada cena deve seguir o seguinte formato:\n\n**Cena X - [Resumo da ação da cena]:**  \n- **Falas dos personagens:**  \n[Diálogos curtos, engraçados ou dramáticos, conforme o tom do vídeo]  \n- **Descrição visual:**  \n[Descreva a cena como se estivesse explicando para um diretor de fotografia]  \n- **Prompt de imagem (formato texto contínuo):**  \n[Prompt completo para IA — estilo Midjourney ou Leonardo, em formato 9:16, realista ou anime, incluindo: personagens, ambientação, pose, expressão, iluminação e detalhes. Exemplo: “anime style, Naruto holding a smartphone looking confused, daytime, neon-lit Tokyo background, vertical 9:16, cinematic lighting, detailed face, expressive, surprised look”]  \n- **Expressão e emoção:**  \n[Descreva como o personagem se sente e demonstra isso no rosto]  \n- **Ambiente e iluminação:**  \n[Ambiente físico + tipo de luz: externa, interna, quente, fria, etc.]  \n- **Ação do personagem:**  \n[Descreva movimento, gestos, posição corporal, se ele interage com algo]\n\n(repita isso para todas as cenas)\n\n**3. Estilo visual geral:**  \n[Ex: realista, anime, cinematográfico, HQ, cartoon, etc.]\n\n**4. Hashtags separadas por rede:**  \n- TikTok: #hashtag1 #hashtag2 #hashtag3  \n- Shorts: #hashtag1 #hashtag2 #hashtag3  \n- Kwai: #hashtag1 #hashtag2 #hashtag3\n\n**5. Trilha sonora ou efeito sonoro:**  \n[Indique uma música, um efeito engraçado, ou algo que combine com o clima]\n\n---\n\n**REGRAS OBRIGATÓRIAS:**  \n- Nunca fuja da ideia enviada.  \n- Não invente outros temas.  \n- Mantenha consistência entre as cenas.  \n- Use linguagem criativa e visual.  \n- Gere um prompt de imagem 100% pronto para ser colado em gerador de imagem AI.",
              "type": "string"
            },
            {
              "id": "8f3c98ee-dd47-4d46-be9f-83a6e6857c92",
              "name": "IA",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        60
      ],
      "id": "85fb6670-3969-4ea2-8c76-0a4b72558e51",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        480,
        240
      ],
      "id": "0d9ddd93-c608-4e42-92a1-2118641f422c",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "yWNkvqvh4NFmRbKV",
          "name": "Groq account 2"
        }
      }
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=Crie um roteiro com base nesta ideia: {{ $json[\"IA\"] }}",
        "options": {
          "systemMessage": "={{ $json.prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        460,
        60
      ],
      "id": "d5aec0c8-e0a1-4295-9af5-74ce01641be6",
      "name": "Agent roterista"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        780,
        840
      ],
      "id": "77424942-ef1c-470f-b4c2-26e6a965c342",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1360,
        880
      ],
      "id": "5c04adb9-fa78-4a41-b505-8e54cae49a3a",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Recebe o campo 'termos' do input, que deve ser uma string separada por vírgulas\nconst termosBrutos = $json.termos || '';\n\n// Divide os termos por vírgula, limpa espaços e filtra vazios\nconst termos = termosBrutos\n  .split(',')\n  .map(t => t.trim())\n  .filter(Boolean);\n\n// Embaralha e seleciona até 3 termos aleatórios\nconst selecionados = termos\n  .sort(() => 0.5 - Math.random())\n  .slice(0, 3);\n\n// Junta os termos com espaço (estilo de busca do YouTube)\nconst busca = selecionados.join(' ');\n\n// Retorna o valor da busca como campo 'q' para passar na API\nreturn [\n  {\n    json: {\n      q: busca\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1620,
        1100
      ],
      "id": "a8ed69dd-8a63-448d-85c7-b47752dd0d72",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1900,
        1080
      ],
      "id": "bd189e13-294e-4769-8b0c-d33458fe048c",
      "name": "Merge1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b54a2881-7f0a-443d-af39-35b72f91ec22",
              "name": "termos",
              "value": "dc, desenho para crianças, spiderman, memes, marvel, herois, superhero, shorts, funny moments, batman, homem aranha, cartoon, kids, marvel shorts, superman, avengers, desenhos engraçados, superhero meme, ação infantil, iron man, hq animada, super hero kids, justice league, shorts engraçados, mini heróis, anime heroes, venom, marvel funny, epic battle",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        1100
      ],
      "id": "7a042749-60cd-4d86-bfdc-1f4417a14258",
      "name": "busca"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet"
            },
            {
              "name": "q",
              "value": "={{ $json.q }}"
            },
            {
              "name": "type",
              "value": "video"
            },
            {
              "name": "order",
              "value": "viewCount"
            },
            {
              "name": "maxResults",
              "value": "2"
            },
            {
              "name": "key",
              "value": "={{ $json.key }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2220,
        1080
      ],
      "id": "1f85a452-5398-4e85-afea-f30cc733b469",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const duration = item.json.contentDetails?.duration || \"\";\n  const title = item.json.snippet?.title?.toLowerCase() || \"\";\n  const description = item.json.snippet?.description?.toLowerCase() || \"\";\n  const tags = item.json.snippet?.tags || [];\n\n  // Converter ISO 8601 (PT1M30S) para segundos\n  const match = duration.match(/PT(?:(\\d+)M)?(?:(\\d+)S)?/);\n  const minutes = match && match[1] ? parseInt(match[1]) : 0;\n  const seconds = match && match[2] ? parseInt(match[2]) : 0;\n  const totalSeconds = minutes * 60 + seconds;\n\n  const hasShortInTitle = title.includes(\"short\");\n  const hasShortInDesc = description.includes(\"short\");\n  const hasShortInTags = tags.some(tag => tag.toLowerCase().includes(\"short\"));\n\n  // critério inteligente\n  return totalSeconds <= 62 || hasShortInTitle || hasShortInDesc || hasShortInTags;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        880
      ],
      "id": "8c3fbe28-8a9c-4881-a719-16137c338618",
      "name": "shorts1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const videoItems = items[0].json.items;\nconst videoIds = [];\n\nfor (const video of videoItems) {\n  const id = video.id?.videoId;\n  if (id) {\n    videoIds.push(id);\n  }\n}\n\nreturn [\n  {\n    json: {\n      videoIds: videoIds.join(\",\")\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        640
      ],
      "id": "319ea101-ebb4-4de7-bc8f-8f05b5d7b796",
      "name": "ids1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const videoIds = items.flatMap(item => {\n  return item.json.items.map(video => video.id.videoId);\n});\n\nreturn [\n  {\n    json: {\n      videoIds: videoIds.join(',')\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2460,
        1080
      ],
      "id": "0d79b6b0-62f6-49ba-8dbd-cd65ddb8cdf4",
      "name": "idss1"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $json.key }}"
            },
            {
              "name": "part",
              "value": "snippet,statistics,contentDetails"
            },
            {
              "name": "id",
              "value": "={{ $json.videoIds }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1620,
        880
      ],
      "id": "b8b60fa8-67bc-4188-95df-8530aafa66f8",
      "name": "viws1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2700,
        860
      ],
      "id": "19a9a9cc-9946-4e84-91c0-122ec4c9b157",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e225c73-6ba5-4bdd-a529-37304efd4b4d",
              "name": "key",
              "value": "AIzaSyA_uQbl3SYvPqIrBhM1WlFqVFdZA6uqzrs",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        700
      ],
      "id": "26d6b3d3-bd1e-40fc-bf19-59ac1da54419",
      "name": "key1"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Agent roterista",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent roterista",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "key1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "viws1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "busca": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "idss1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "shorts1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "idss1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "viws1": {
      "main": [
        [
          {
            "node": "shorts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "key1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "busca",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "f714f9cb-e92e-474b-845d-8dd052f249e5",
  "triggerCount": 0,
  "tags": []
}